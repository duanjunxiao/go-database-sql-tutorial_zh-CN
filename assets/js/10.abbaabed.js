(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{196:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("现在我们已经准备好如何去修改数据和使用事务了.如果你已经习惯了使用一个"),a("code",[t._v("statement")]),t._v("对象来获取或更新数据,那么你会发现,两者在Go中有着明显的区别,其被人为地区分了出来.")]),t._v(" "),a("h1",{attrs:{id:"修改数据的语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改数据的语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改数据的语句")]),t._v(" "),a("p",[a("code",[t._v("Exec()")]),t._v(",最适合与预编译语句一起使用来完成"),a("code",[t._v("INSERT")]),t._v(","),a("code",[t._v("UPDATE")]),t._v(", "),a("code",[t._v("DELETE")]),t._v(",以及其他不用返回行的语句.下面的例子将演示如何插入一行并且检查操作返回的元数据.")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("stmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Prepare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"INSERT INTO users(name) VALUES(?)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nres"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" stmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dolly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlastId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LastInsertId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nrowCnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RowsAffected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ID = %d, affected = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rowCnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("执行语句会生成一个"),a("code",[t._v("sql.Result")]),t._v(",通过它可访问返回语句的元数据:最新的插入ID和受影响的行数.")]),t._v(" "),a("p",[t._v("如果你不关心执行的返回结果呢?如果你只想执行一个语句,再检查是否有错误,忽略其返回结果呢?那么下面的两个语句是否做了同一件事?")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE FROM users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE FROM users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BAD")]),t._v("\n")])])]),a("p",[t._v("答案是否定的.它们并不是一样的,而且你也"),a("strong",[t._v("不能")]),t._v("像这样使用**"),a("code",[t._v("Query()")]),a("strong",[t._v("."),a("code",[t._v("Query()")]),t._v("会返回一个"),a("code",[t._v("sql.Rows")]),t._v(",在"),a("code",[t._v("sql.Rows")]),t._v("未关闭前会一直占用连接.\n因为也许存在未读的(多行)数据,所以这个连接会一直被使用.在上面的例子中,这种连接")]),t._v("永远**都不会被释放.gc最终会关闭底层的"),a("code",[t._v("net.Conn")]),t._v(",但这会很耗时.此外,"),a("code",[t._v("database/sql")]),t._v("包也会追踪连接池中的这个连接,期待你在某一时刻会释放它从而让这个连接再使用.\n因此,这种反模式很容易导致资源失控(比如,太多的连接).")]),t._v(" "),a("h1",{attrs:{id:"使用事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用事务","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用事务")]),t._v(" "),a("p",[t._v("在Go中,事务的本质是一个对象,可存储与数据库的连接.它允许你做目前你所接触过的所有操作,但必须在同一个连接中完成.")]),t._v(" "),a("p",[t._v("通过调用"),a("code",[t._v("db.Begin()")]),t._v("来开启一个事务,再通过调用变量"),a("code",[t._v("Tx")]),t._v("的"),a("code",[t._v("Commit()")]),t._v("和"),a("code",[t._v("Rollback()")]),t._v("方法来关闭事务.在其内部,"),a("code",[t._v("Tx")]),t._v("从连接池中获取一个连接,存起来以备这个事务使用.Tx的方法和你调用数据库时的方法是一一对应的,比如"),a("code",[t._v("Query()")]),t._v("等等.")]),t._v(" "),a("p",[t._v("在事务中创建的预编译语句也是绑定在这个事务上的.(不能在事务外使用,同样的,在数据库句柄上创建的(即事务外创建的)预编译语句也不能在事务中使用).可在"),a("router-link",{attrs:{to:"/prepared.html"}},[t._v("预编译语句")]),t._v("中了解更多内容.")],1),t._v(" "),a("p",[t._v("请不要将事务的"),a("code",[t._v("Begin()")]),t._v("和"),a("code",[t._v("Commit()")]),t._v("函数与SQL语句中的"),a("code",[t._v("BEGIN")]),t._v("和"),a("code",[t._v("COMMIT")]),t._v("混淆.这会引发下面中的坏结果:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Tx")]),t._v("对象会一直保持打开状态,而不会将连接释放回连接池.")]),t._v(" "),a("li",[t._v("数据库的状态不再和代码中与其对应的变量的状态同步.")]),t._v(" "),a("li",[t._v("你会认为你是在事务内部的连接上执行查询,实际上Go为你隐式地创建了多个连接,而且这些语句并不属于这个事务.")])]),t._v(" "),a("p",[t._v("在事务内操作时,你应当小心,不要使用"),a("code",[t._v("db")]),t._v("变量,而是全部使用你调用"),a("code",[t._v("db.Begin()")]),t._v("时创建的"),a("code",[t._v("Tx")]),t._v("变量."),a("code",[t._v("db")]),t._v("不属于事务,"),a("code",[t._v("Tx")]),t._v("对象才是.如果你再调用"),a("code",[t._v("db.Exec()")]),t._v("或类似的,这些操作会发生在事务外的其他连接上.")]),t._v(" "),a("p",[t._v("如果你需要使用多种语句来修改连接的状态,那么你就需要"),a("code",[t._v("Tx")]),t._v(",即使你自身不想使用事务.例如:")]),t._v(" "),a("ul",[a("li",[t._v("创建临时表,这些临时表只对一个连接可见.")]),t._v(" "),a("li",[t._v("设置变量,比如MySQL的语法"),a("code",[t._v("SET @var := somevalue")]),t._v(".")]),t._v(" "),a("li",[t._v("修改连接的参数,比如字符集和超时时间.")])]),t._v(" "),a("p",[t._v("如果你想做这些事,那么你就必须在单一连接中进行,而在Go中唯一的做法就是使用事务.")])])},[],!1,null,null,null);s.default=e.exports}}]);